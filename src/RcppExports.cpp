// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;
using namespace arma;
using namespace std;

// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _testrcpp_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _testrcpp_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _testrcpp_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _testrcpp_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// fun_mul
mat fun_mul(mat A, colvec x);
RcppExport SEXP _testrcpp_fun_mul(SEXP ASEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< colvec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fun_mul(A, x));
    return rcpp_result_gen;
END_RCPP
}
// fun_dev
mat fun_dev(mat A, colvec x);
RcppExport SEXP _testrcpp_fun_dev(SEXP ASEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< colvec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fun_dev(A, x));
    return rcpp_result_gen;
END_RCPP
}
// G_thres_cpp
vec G_thres_cpp(vec x, double thres);
RcppExport SEXP _testrcpp_G_thres_cpp(SEXP xSEXP, SEXP thresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type thres(thresSEXP);
    rcpp_result_gen = Rcpp::wrap(G_thres_cpp(x, thres));
    return rcpp_result_gen;
END_RCPP
}
// post_e_cpp
mat post_e_cpp(int l, mat Se_pos, mat Se_neg, mat Se_pos_other, mat Se_neg_other, vec Sc, vec r, vec s_sq, mat Xmat, vec lambda, mat Y_pos, mat Y_neg, double thres);
RcppExport SEXP _testrcpp_post_e_cpp(SEXP lSEXP, SEXP Se_posSEXP, SEXP Se_negSEXP, SEXP Se_pos_otherSEXP, SEXP Se_neg_otherSEXP, SEXP ScSEXP, SEXP rSEXP, SEXP s_sqSEXP, SEXP XmatSEXP, SEXP lambdaSEXP, SEXP Y_posSEXP, SEXP Y_negSEXP, SEXP thresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    Rcpp::traits::input_parameter< mat >::type Se_pos(Se_posSEXP);
    Rcpp::traits::input_parameter< mat >::type Se_neg(Se_negSEXP);
    Rcpp::traits::input_parameter< mat >::type Se_pos_other(Se_pos_otherSEXP);
    Rcpp::traits::input_parameter< mat >::type Se_neg_other(Se_neg_otherSEXP);
    Rcpp::traits::input_parameter< vec >::type Sc(ScSEXP);
    Rcpp::traits::input_parameter< vec >::type r(rSEXP);
    Rcpp::traits::input_parameter< vec >::type s_sq(s_sqSEXP);
    Rcpp::traits::input_parameter< mat >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< mat >::type Y_pos(Y_posSEXP);
    Rcpp::traits::input_parameter< mat >::type Y_neg(Y_negSEXP);
    Rcpp::traits::input_parameter< double >::type thres(thresSEXP);
    rcpp_result_gen = Rcpp::wrap(post_e_cpp(l, Se_pos, Se_neg, Se_pos_other, Se_neg_other, Sc, r, s_sq, Xmat, lambda, Y_pos, Y_neg, thres));
    return rcpp_result_gen;
END_RCPP
}
// post_tau_cpp
mat post_tau_cpp(int n, mat Se_pos, mat Se_neg, vec Sc, mat Xmat, mat Y_pos, mat Y_neg, double alpha1, double beta1, double alpha2, double beta2, double thres);
RcppExport SEXP _testrcpp_post_tau_cpp(SEXP nSEXP, SEXP Se_posSEXP, SEXP Se_negSEXP, SEXP ScSEXP, SEXP XmatSEXP, SEXP Y_posSEXP, SEXP Y_negSEXP, SEXP alpha1SEXP, SEXP beta1SEXP, SEXP alpha2SEXP, SEXP beta2SEXP, SEXP thresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< mat >::type Se_pos(Se_posSEXP);
    Rcpp::traits::input_parameter< mat >::type Se_neg(Se_negSEXP);
    Rcpp::traits::input_parameter< vec >::type Sc(ScSEXP);
    Rcpp::traits::input_parameter< mat >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< mat >::type Y_pos(Y_posSEXP);
    Rcpp::traits::input_parameter< mat >::type Y_neg(Y_negSEXP);
    Rcpp::traits::input_parameter< double >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< double >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< double >::type thres(thresSEXP);
    rcpp_result_gen = Rcpp::wrap(post_tau_cpp(n, Se_pos, Se_neg, Sc, Xmat, Y_pos, Y_neg, alpha1, beta1, alpha2, beta2, thres));
    return rcpp_result_gen;
END_RCPP
}
// sample_c_l_cpp
double sample_c_l_cpp(mat grids, int n, int l, mat Se_pos, mat Se_neg, vec Sc_other, vec r, vec s_sq, double tau_xi_sq, mat Xmat, vec lambda, mat Y_pos, mat Y_neg, double thres);
RcppExport SEXP _testrcpp_sample_c_l_cpp(SEXP gridsSEXP, SEXP nSEXP, SEXP lSEXP, SEXP Se_posSEXP, SEXP Se_negSEXP, SEXP Sc_otherSEXP, SEXP rSEXP, SEXP s_sqSEXP, SEXP tau_xi_sqSEXP, SEXP XmatSEXP, SEXP lambdaSEXP, SEXP Y_posSEXP, SEXP Y_negSEXP, SEXP thresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type grids(gridsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    Rcpp::traits::input_parameter< mat >::type Se_pos(Se_posSEXP);
    Rcpp::traits::input_parameter< mat >::type Se_neg(Se_negSEXP);
    Rcpp::traits::input_parameter< vec >::type Sc_other(Sc_otherSEXP);
    Rcpp::traits::input_parameter< vec >::type r(rSEXP);
    Rcpp::traits::input_parameter< vec >::type s_sq(s_sqSEXP);
    Rcpp::traits::input_parameter< double >::type tau_xi_sq(tau_xi_sqSEXP);
    Rcpp::traits::input_parameter< mat >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< mat >::type Y_pos(Y_posSEXP);
    Rcpp::traits::input_parameter< mat >::type Y_neg(Y_negSEXP);
    Rcpp::traits::input_parameter< double >::type thres(thresSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_c_l_cpp(grids, n, l, Se_pos, Se_neg, Sc_other, r, s_sq, tau_xi_sq, Xmat, lambda, Y_pos, Y_neg, thres));
    return rcpp_result_gen;
END_RCPP
}
// sample_thres_cpp
double sample_thres_cpp(mat grids, int n, mat Se_pos, mat Se_neg, vec Sc, vec r, vec s_sq, double tau_xi_sq, mat Xmat, vec lambda, mat Y_pos, mat Y_neg);
RcppExport SEXP _testrcpp_sample_thres_cpp(SEXP gridsSEXP, SEXP nSEXP, SEXP Se_posSEXP, SEXP Se_negSEXP, SEXP ScSEXP, SEXP rSEXP, SEXP s_sqSEXP, SEXP tau_xi_sqSEXP, SEXP XmatSEXP, SEXP lambdaSEXP, SEXP Y_posSEXP, SEXP Y_negSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type grids(gridsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< mat >::type Se_pos(Se_posSEXP);
    Rcpp::traits::input_parameter< mat >::type Se_neg(Se_negSEXP);
    Rcpp::traits::input_parameter< vec >::type Sc(ScSEXP);
    Rcpp::traits::input_parameter< vec >::type r(rSEXP);
    Rcpp::traits::input_parameter< vec >::type s_sq(s_sqSEXP);
    Rcpp::traits::input_parameter< double >::type tau_xi_sq(tau_xi_sqSEXP);
    Rcpp::traits::input_parameter< mat >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< mat >::type Y_pos(Y_posSEXP);
    Rcpp::traits::input_parameter< mat >::type Y_neg(Y_negSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_thres_cpp(grids, n, Se_pos, Se_neg, Sc, r, s_sq, tau_xi_sq, Xmat, lambda, Y_pos, Y_neg));
    return rcpp_result_gen;
END_RCPP
}
// loglikelihood_cpp
double loglikelihood_cpp(int n, mat Se_pos, mat Se_neg, vec Sc, vec r, vec s_sq, mat Xmat, mat Y_pos, mat Y_neg, double thres);
RcppExport SEXP _testrcpp_loglikelihood_cpp(SEXP nSEXP, SEXP Se_posSEXP, SEXP Se_negSEXP, SEXP ScSEXP, SEXP rSEXP, SEXP s_sqSEXP, SEXP XmatSEXP, SEXP Y_posSEXP, SEXP Y_negSEXP, SEXP thresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< mat >::type Se_pos(Se_posSEXP);
    Rcpp::traits::input_parameter< mat >::type Se_neg(Se_negSEXP);
    Rcpp::traits::input_parameter< vec >::type Sc(ScSEXP);
    Rcpp::traits::input_parameter< vec >::type r(rSEXP);
    Rcpp::traits::input_parameter< vec >::type s_sq(s_sqSEXP);
    Rcpp::traits::input_parameter< mat >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< mat >::type Y_pos(Y_posSEXP);
    Rcpp::traits::input_parameter< mat >::type Y_neg(Y_negSEXP);
    Rcpp::traits::input_parameter< double >::type thres(thresSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikelihood_cpp(n, Se_pos, Se_neg, Sc, r, s_sq, Xmat, Y_pos, Y_neg, thres));
    return rcpp_result_gen;
END_RCPP
}
// sample_gibbs_cpp
List sample_gibbs_cpp(mat grids, int T, int V, int n, int L, mat Xmat, vec lambda, vec tau_1_sq_init, vec tau_2_sq_init, vec c_init, mat e_pos_init, mat e_neg_init, mat Y_pos, mat Y_neg, double alpha1, double beta1, double alpha2, double beta2, double thres_init, Function rinvgamma);
RcppExport SEXP _testrcpp_sample_gibbs_cpp(SEXP gridsSEXP, SEXP TSEXP, SEXP VSEXP, SEXP nSEXP, SEXP LSEXP, SEXP XmatSEXP, SEXP lambdaSEXP, SEXP tau_1_sq_initSEXP, SEXP tau_2_sq_initSEXP, SEXP c_initSEXP, SEXP e_pos_initSEXP, SEXP e_neg_initSEXP, SEXP Y_posSEXP, SEXP Y_negSEXP, SEXP alpha1SEXP, SEXP beta1SEXP, SEXP alpha2SEXP, SEXP beta2SEXP, SEXP thres_initSEXP, SEXP rinvgammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type grids(gridsSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< mat >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< vec >::type tau_1_sq_init(tau_1_sq_initSEXP);
    Rcpp::traits::input_parameter< vec >::type tau_2_sq_init(tau_2_sq_initSEXP);
    Rcpp::traits::input_parameter< vec >::type c_init(c_initSEXP);
    Rcpp::traits::input_parameter< mat >::type e_pos_init(e_pos_initSEXP);
    Rcpp::traits::input_parameter< mat >::type e_neg_init(e_neg_initSEXP);
    Rcpp::traits::input_parameter< mat >::type Y_pos(Y_posSEXP);
    Rcpp::traits::input_parameter< mat >::type Y_neg(Y_negSEXP);
    Rcpp::traits::input_parameter< double >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< double >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< double >::type thres_init(thres_initSEXP);
    Rcpp::traits::input_parameter< Function >::type rinvgamma(rinvgammaSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_gibbs_cpp(grids, T, V, n, L, Xmat, lambda, tau_1_sq_init, tau_2_sq_init, c_init, e_pos_init, e_neg_init, Y_pos, Y_neg, alpha1, beta1, alpha2, beta2, thres_init, rinvgamma));
    return rcpp_result_gen;
END_RCPP
}
